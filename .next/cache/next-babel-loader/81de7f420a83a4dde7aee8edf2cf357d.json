{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kellvembarobsa/projetos/zapaudios/site/pages/audio/_waveform.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { ButtonPrimary } from \"../../components/Button\";\n\nconst formWaveSurferOptions = ref => ({\n  container: ref,\n  waveColor: \"#eee\",\n  progressColor: \"OrangeRed\",\n  cursorColor: \"OrangeRed\",\n  barWidth: 3,\n  barRadius: 3,\n  responsive: true,\n  height: 150,\n  // If true, normalize by the maximum peak instead of 1.0.\n  normalize: true,\n  // Use the PeakCache to improve rendering speed of large waveforms.\n  partialRender: true\n});\n\nexport default function Waveform({\n  url\n}) {\n  const waveformRef = useRef(null);\n  const wavesurfer = useRef(null);\n  const {\n    0: playing,\n    1: setPlay\n  } = useState(false);\n  const {\n    0: volume,\n    1: setVolume\n  } = useState(0.5); // create new WaveSurfer instance\n  // On component mount and when url changes\n\n  useEffect(() => {\n    setPlay(false);\n    const options = formWaveSurferOptions(waveformRef.current);\n    wavesurfer.current = WaveSurfer.create(options);\n    wavesurfer.current.load(url);\n    wavesurfer.current.on(\"ready\", function () {\n      // https://wavesurfer-js.org/docs/methods.html\n      // wavesurfer.current.play();\n      // setPlay(true);\n      // make sure object stillavailable when file loaded\n      if (wavesurfer.current) {\n        wavesurfer.current.setVolume(volume);\n        setVolume(volume);\n      }\n    }); // Removes events, elements and disconnects Web Audio nodes.\n    // when component unmount\n\n    return () => wavesurfer.current.destroy();\n  }, [url]);\n\n  const handlePlayPause = () => {\n    setPlay(!playing);\n    wavesurfer.current.playPause();\n  };\n\n  const onVolumeChange = e => {\n    const {\n      target\n    } = e;\n    const newVolume = +target.value;\n\n    if (newVolume) {\n      setVolume(newVolume);\n      wavesurfer.current.setVolume(newVolume || 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"waveform\",\n      ref: waveformRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n        onClick: handlePlayPause,\n        children: !playing ? \"Play\" : \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/kellvembarobsa/projetos/zapaudios/site/pages/audio/_waveform.tsx"],"names":["React","useEffect","useRef","useState","WaveSurfer","ButtonPrimary","formWaveSurferOptions","ref","container","waveColor","progressColor","cursorColor","barWidth","barRadius","responsive","height","normalize","partialRender","Waveform","url","waveformRef","wavesurfer","playing","setPlay","volume","setVolume","options","current","create","load","on","destroy","handlePlayPause","playPause","onVolumeChange","e","target","newVolume","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport WaveSurfer from \"wavesurfer.js\";\nimport { Button, ButtonPrimary } from \"../../components/Button\";\n\nconst formWaveSurferOptions = ref => ({\n  container: ref,\n  waveColor: \"#eee\",\n  progressColor: \"OrangeRed\",\n  cursorColor: \"OrangeRed\",\n  barWidth: 3,\n  barRadius: 3,\n  responsive: true,\n  height: 150,\n  // If true, normalize by the maximum peak instead of 1.0.\n  normalize: true,\n  // Use the PeakCache to improve rendering speed of large waveforms.\n  partialRender: true\n});\n\nexport default function Waveform({ url }) {\n  const waveformRef = useRef(null);\n  const wavesurfer = useRef(null);\n  const [playing, setPlay] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n\n  // create new WaveSurfer instance\n  // On component mount and when url changes\n  useEffect(() => {\n    setPlay(false);\n\n    const options = formWaveSurferOptions(waveformRef.current);\n    wavesurfer.current = WaveSurfer.create(options);\n\n    wavesurfer.current.load(url);\n\n    wavesurfer.current.on(\"ready\", function() {\n      // https://wavesurfer-js.org/docs/methods.html\n      // wavesurfer.current.play();\n      // setPlay(true);\n\n      // make sure object stillavailable when file loaded\n      if (wavesurfer.current) {\n        wavesurfer.current.setVolume(volume);\n        setVolume(volume);\n      }\n    });\n\n    // Removes events, elements and disconnects Web Audio nodes.\n    // when component unmount\n    return () => wavesurfer.current.destroy();\n  }, [url]);\n\n  const handlePlayPause = () => {\n    setPlay(!playing);\n    wavesurfer.current.playPause();\n  };\n\n  const onVolumeChange = e => {\n    const { target } = e;\n    const newVolume = +target.value;\n\n    if (newVolume) {\n      setVolume(newVolume);\n      wavesurfer.current.setVolume(newVolume || 1);\n    }\n  };\n\n  return (\n    <div>\n      <div id=\"waveform\" ref={waveformRef} />\n      <div className=\"controls\">\n        <ButtonPrimary onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</ButtonPrimary>\n        {/* <input\n          type=\"range\"\n          id=\"volume\"\n          name=\"volume\"\n          // waveSurfer recognize value of `0` same as `1`\n          //  so we need to set some zero-ish value for silence\n          min=\"0.01\"\n          max=\"1\"\n          step=\".025\"\n          onChange={onVolumeChange}\n          defaultValue={volume}\n        /> */}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}